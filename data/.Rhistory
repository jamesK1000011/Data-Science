for(i in start:end){
vec1[i] = vec1[i] + 5
print(vec1[i])
}
vec1_mean = mean(vec1)
for(i in start:end){
ifelse(vec1[i] > vec1_mean, vec1[i] - 5, vec1[i] + 10)
print(vec1[i])
}
for(i in start:end){
ifelse(vec1[i] > vec1_mean, vec1[i] = vec1[i] - 5, vec1[i] = vec1[i] + 10)
print(vec1[i])
}
for(i in start:end){
ifelse(vec1[i] > vec1_mean, (vec1[i] = vec1[i] - 5), (vec1[i] = vec1[i] + 10))
print(vec1[i])
}
vec1_mean2 = mean(vec1)
namelist = c("Susie", "Nick", "Kate", "Simon", "Jamal", "Eduardo")
Greeting(namelist)
# Where NAME is the entry in `listofnames` vector.
# Hint: You will need to use `length`, `paste0`, `print`, and a `for` loop.
Greeting = function(listofnames){
start = 1
end = length(listofnames)
for(i in start:end){
message_1 = paste0("Welcome to coding in R, ", namelist_var[i])
print(message_1)
}
}
Greeting(namelist)
# Where NAME is the entry in `listofnames` vector.
# Hint: You will need to use `length`, `paste0`, `print`, and a `for` loop.
Greeting = function(listofnames){
start = 1
end = length(listofnames)
for(i in start:end){
message_1 = paste0("Welcome to coding in R, ", listofnames[i])
print(message_1)
}
}
Greeting(namelist)
opts_knit$set(root.dir = "~/Desktop/af-werx/data")
setwd("~/Desktop/af-werx/data")
temp_Chicago_data = read.csv("chicago_census.csv", header = T, stringsAsFactors = F)
summary(temp_Chicago_data)
census_sub = nrow(temp_Chicago_data) - 1
length(temp_Chicago_data)
dim(temp_Chicago_data)
temp_Chicago_data[census_sub,] = NULL
census_sub = nrow(temp_Chicago_data)
temp_Chicago_data[census_sub,] = NULL
temp_Chicago_data[78,] = NULL
temp_Chicago_data = read.csv("chicago_census.csv", header = T, stringsAsFactors = F)
summary(temp_Chicago_data)
census_sub = nrow(temp_Chicago_data)
as.integer(census_sub)
census_sub =as.integer(census_sub)
temp_Chicago_data[-c(census_sub),]
aggregate(temp_Chicago_data)
summary(temp_Chicago_data)
temp_Chicago_data[-c(census_sub),]
census_sub = temp_Chicago_data[-c(census_sub),]
summary(temp_Chicago_data)
temp_Chicago_data = read.csv("chicago_census.csv", header = T, stringsAsFactors = F)
summary(temp_Chicago_data)
census_sub = nrow(temp_Chicago_data)
census_sub =as.integer(census_sub)
census_sub = temp_Chicago_data[-c(census_sub),]
temp_Chicago_data = read.csv("chicago_census.csv", header = T, stringsAsFactors = F)
summary(temp_Chicago_data)
census_sub = nrow(temp_Chicago_data)
census_sub =as.integer(census_sub)
temp_Chicago_data = temp_Chicago_data[-c(census_sub),]
summary(temp_Chicago_data)
View(temp_Chicago_data)
attributes(temp_Chicago_data)
plot(temp_Chicago_data[1:77,4])
plot(temp_Chicago_data[1:77,2])
plot(temp_Chicago_data[1:77,2])
plot(temp_Chicago_data[1:77,5])
barplot(temp_Chicago_data[1:77,5])
barplot(temp_Chicago_data["PERCENT.AGED.16..UNEMPLOYED",5])
barplot(temp_Chicago_data["PERCENT.AGED.16..UNEMPLOYED",5])
barplot(temp_Chicago_data[1:77,"PERCENT.AGED.16..UNEMPLOYED"])
barplot(temp_Chicago_data[1:77,"HARDSHIP.INDEX"])
install.packages("corrplot")
view(state.x77)
View(state.x77)
class(state.x77)
str(state.x77)
dim(state.x77)
dim(state.x77)[1]
dim(state.x77)[2]
require("knitr")
opts_knit$set(root.dir = "~/Desktop/af-werx/data")
setwd("~/Desktop/af-werx")
getwd()
main_dir = "~/Desktop/af-werx"
data_dir = paste0(main_dir, "/data")
data_dir
plot_dir = paste0(main_dir, "/plots")
plot_dir
setwd(data_dir)
getwd()
?sample
sample(1:100, size = 10)
sample(state.name, size = 5)
setwd("~/Desktop/af-werx/data")
out_list = list()
for(i in 1:15){
out_list[i] - sqrt(i)
}
for(i in 1:15){
out_list[i] = sqrt(i)
}
out_list
out_list = lapply(1:5, sqrt)
out_list
?lapply
state.region
unique(state.region)
unique_region = unique(state.region)
unique_region
unique_region_list = as.list(unique_region)
unique_region_list
as.character(unique_region_list[[1]])
unique_regions_list = lapply(unique_region_list, as.character)
unique_regions_list = lapply(unique_region_list, as.character)
unique_regions_list
toupper(unique_region_list[[1]])
unique_region_list = lapply(unique_region_list, toupper)
unique_region_list
# Set seed as 2 and generate 10 state abbreviations from `state.abb`.
set.seed(2)
sample(state.abb, size = 10)
# Set seed as 2 and generate 10 state abbreviations from `state.abb`.
set.seed(2)
sample(state.abb, size = 10)
unique_regions_list = as.list(unique_regions)
#----------------------------------------------+
#### Question 3 ####
# In this question, we will use `unique_regions_list`, which we defined during the class.
unique_regions = unique(state.region)
unique_regions_list = as.list(unique_regions)
unique_regions_list = lapply(unique_regions_list, as.character)
# Convert the entries in the `unique_regions_list` to lower case using `lapply` and save them
# in `lower_case_list` variable.
lower_case_list = lapply(unique_regions_list, tolower)
lower_case_list
#----------------------------------------------+
#### Question 4 ####
# Take the square root of the entries in the `numeric_list` using `lapply` and
# save them into `sqrt_list` variable.
numeric_list = list(first=-1, second =2, third=3, fourth = -4)
sqrt_list = lapply(numeric_list, sqrt)
#----------------------------------------------+
#### Question 4 ####
# Take the square root of the entries in the `numeric_list` using `lapply` and
# save them into `sqrt_list` variable.
numeric_list = list(first=-1, second =2, third=3, fourth = -4)
numeric_list_abs = lapply(numeric_list, abs)
sqrt_list = lapply(numeric_list, sqrt)
sqrt_list = lapply(numeric_list_abs, sqrt)
sqrt_list
# Set seed as 2 and generate 10 state abbreviations from `state.abb`.
set.seed(2)
sample(state.abb, size = 10)
sample(state.abb, size = 10)
# Set seed as 2 and generate 10 state abbreviations from `state.abb`.
set.seed(2)
sample(state.abb, size = 10)
#----------------------------------------------+
#### Question 3 ####
# In this question, we will use `unique_regions_list`, which we defined during the class.
unique_regions = unique(state.region)
unique_regions_list = as.list(unique_regions)
# Convert the entries in the `unique_regions_list` to lower case using `lapply` and save them
# in `lower_case_list` variable.
lower_case_list = lapply(unique_regions_list, tolower)
lower_case_list
gsub(" ", "_", unique_region_list[[2]])
gsub(" ", "_", unique_region_list[[3]])
gsub(" ", "_", unique_region_list[[5]])
gsub(" ", "_", unique_region_list[[1]])
gsub(" ", "_", unique_region_list[[4]])
fancy_list = lapply(unique_region_list, function(entry){gsub("", "_",toupper(entry))})
fancy_list
unique_region = unique(state.region)
unique_region_list = as.list(unique_region)
as.character(unique_region_list[[1]])
unique_region_list = lapply(unique_region_list, as.character)
toupper(unique_region_list[[1]])
unique_region_list = lapply(unique_region_list, toupper)
gsub(" ", "_", unique_region_list[[4]])
fancy_list = lapply(unique_region_list, function(entry){gsub(" ", "_",toupper(entry))})
fancy_list
fancy_list = lapply(unique_region_list, function(entry){gsub(" ", "_",tolower(entry))})
fancy_list
toUpperAndUnderscore = function(entry){
gsub(" ", "_", toupper(entry))
}
#to check that it works
toUpperAndUnderscore("north central")
fancy_list = lapply(unique_region_list, toUpperAndUnderscore)
fancy_list = lapply(unique_region_list, toUpperAndUnderscore)
fancy_list
random_vec = sample(1:50, size=50)
sample_vec
sample_vec = sample(1:50, size=50)
sample_vec
state.name[sample_vec]
state.name
state.name[sample_vec]
if(sample_vec[2] %% 2 == 0){
TRUE
}
else{
if(sample_vec[2] %% 2 == 0){
TRUE
}else{
FALSE
}
IsEven = function(n){
if(n %% 2 == 0){
TRUE
}else{
FALSE
}
}
logical_list = lapply(sample_vec, IsEven)
unlist(logical_list)
logical_list = lapply(sample_vec, IsEven)
logical_list = unlist(logical_list)
sample_vec = sample(1:50, size=50)
sample_vec
state.name[sample_vec]
if(sample_vec[2] %% 2 == 0){
TRUE
}else{
FALSE
}
IsEven = function(n){
if(n %% 2 == 0){
TRUE
}else{
FALSE
}
}
logical_list = lapply(sample_vec, IsEven)
logical_vec = unlist(logical_list)
logical_vec
even_id = sample_vec[logical_vec]
even_id
state.name[even_id]
even_id = sample_vec[logical_vec]
even_id
state.name[even_id]
logical_vec = sapply(sample_vec, IsEven)
logical_vec
state_data = state.x77
state_df = as.data.frame(state_data)
class(state_data)
class(state_df)
rownames(state_df)
state_df$States = rownames(state_df)
View(state_df)
rownames(state_df) = NULL
state_df$States = rownames(state_df)
View(state_df)
state_data = state.x77
state_df = as.data.frame(state_data)
class(state_data)
class(state_df)
rownames(state_df) = NULL
View(state_df)
rownames(state_df)
state_df$State = rownames(state_df)
View(state_df)
state_data = state.x77
state_df = as.data.frame(state_data)
class(state_data)
class(state_df)
rownames(state_df)
state_df$State = rownames(state_df)
View(state_df)
rownames(state_df) = NULL
View(state_df)
variable_class = sapply(state_df, class)
variable_class
variable_type = sapply(state_df, typeof)
variable_type
CubeRoot = function(x){
x^(1/2)
}
x = sample(1:10, size = 1)
CubeRoot(x)
x
CubeRoot = function(x){
x^(1/2)
}
x = sample(1:10, size = 1)
x
CubeRoot(x)
#----------------------------------------------+
#### Question 2 ####
# Test the function on taking the cube root of 27. The answer you should get is 3.
Cuberoot(27)
#----------------------------------------------+
#### Question 2 ####
# Test the function on taking the cube root of 27. The answer you should get is 3.
CubeRoot(27)
CubeRoot(27)
CubeRoot(27)
CubeRoot(27)
CubeRoot = function(x){
x^(1/3)
}
CubeRoot(27)
#----------------------------------------------+
#### Question 2 ####
# Test the function on taking the cube root of 27. The answer you should get is 3.
CubeRoot(27)
#----------------------------------------------+
#### Question 3 ####
# In this question, we will use `sample_vec`, which we defined during the class.
sample_vec = sample(1:50, size=50)
#----------------------------------------------+
#### Question 3 ####
# In this question, we will use `sample_vec`, which we defined during the class.
sample_vec = sample(1:50, size=50)
# Using `lapply`, calculate the cube root of each entry of `sample_vec` and save
# the output as a `vector` in a variable named `cube_root_vec`.
vector = lapply(sample_vec, CubeRoot)
cube_root_vec = unlist(vector)
sample_vec
vector
cube_root_vec
class(cube_root_vec)
type(cube_root_vec)
typeof(cube_root_vec)
class(cube_root_vec)
#----------------------------------------------+
#### Question 3 ####
# In this question, we will use `sample_vec`, which we defined during the class.
sample_vec = sample(1:50, size=50)
sample_vec
#----------------------------------------------+
#### Question 4 ####
# Using the `even_ids` and `state.name` vector return the OTHER half of the
# state names that corresponds to randomly distributed ODD numbers.
# Convert these state names to upper case to display.
IsEven = function(n){
if(n %% 2 == 0){
TRUE
}else{
FALSE
}
}
logical_list = lapply(sample_vec, IsEven)
logical_vec = unlist(logical_list)
even_id = sample_vec[logical_vec]
state.name[-even_id]
state.names[event_id]
state.names[even_id]
state.name[even_id]
#----------------------------------------------+
#### Question 5 ####
# In this question, we will use `sample_vec`, which we defined during the class
sample_vec = sample(1:50, size=50)
sample_vec
# Use the `cubeRoot` function on 'sample_vec' and generate the `cube_root_vector1` by using `sapply`.
cube_root_vector1 = sapply(sample_vec, CubeRoot)
cube_root_vector1
#----------------------------------------------+
#### Question 6 ####
# Take the `state_df` dataframe, use `sapply` to find the mean of the first 8 columns.
state_data = state.x77
state_df = as.data.frame(state_data)
View(state_df)
rownames(state_df)
state_df$State = rownames(state_df)
rownames(state_df) = NULL
View(state_df)
#----------------------------------------------+
#### Question 6 ####
# Take the `state_df` dataframe, use `sapply` to find the mean of the first 8 columns.
state_data = state.x77
state_df = as.data.frame(state_data)
column_names_vec = colnames(state_df)
rownames(state_df)
state_df$State = rownames(state_df)
rownames(state_df) = NULL
View(state_df)
State_Mean = sapply(state_df, mean(column_names_vec))
State_Mean = sapply(state_df[,1:8], mean)
State_Mean
#----------------------------------------------+
#### Question 4 ####
# Using the `even_ids` and `state.name` vector return the OTHER half of the
# state names that corresponds to randomly distributed ODD numbers.
# Convert these state names to upper case to display.
IsEven = function(n){
if(n %% 2 == 0){
TRUE
}else{
FALSE
}
}
logical_list = lapply(sample_vec, IsEven)
logical_vec = unlist(logical_list)
even_id = sample_vec[logical_vec]
state.name[-even_id]
state.name[even_id]
#----------------------------------------------+
#### Question 5 ####
# In this question, we will use `sample_vec`, which we defined during the class
sample_vec = sample(1:50, size=50)
sample_vec
# Use the `cubeRoot` function on 'sample_vec' and generate the `cube_root_vector1` by using `sapply`.
cube_root_vector1 = sapply(sample_vec, CubeRoot)
cube_root_vector1
#----------------------------------------------+
#### Question 6 ####
# Take the `state_df` dataframe, use `sapply` to find the mean of the first 8 columns.
state_data = state.x77
state_df = as.data.frame(state_data)
rownames(state_df)
state_df$State = rownames(state_df)
rownames(state_df) = NULL
View(state_df)
State_Mean = sapply(state_df[,1:8], mean)
State_Mean
install.packages("tidyverse")
install.packages("babynames")
library(tidyverse)
install.packages("nycflight13")
install.packages("nycflight13")
install.packages("nycflights13")
install.packages("nycflights13")
library("nycflights13")
getwd()
load("tidyr_table.RData")
load("tidyr_tables.RData")
load("tidyr_tables.RData")
tidyverse_update()
flights = nycflights13::flights
data(flights)
filter(flights, month == 1, year ==2013)
filter_flights = filter(flights, month == 1, year ==2013)
filter_flights
filter(filter(flights, month==1 & day == 25), dept_time==15)
filter(filter(flights, month==1 & day == 25), dep_time==15)
filter(flight, month %in% c(1,3,11) & day == 25)
filter(flights, month %in% c(1,3,11) & day == 25)
filter(NA_df, x>= 1)
NA_df = data.frame = ( x = c(1,NA,2), y = c(1,2,3))
NA_df = data.frame = ( x = c(1,NA,2) y = c(1,2,3))
NA_df = data.frame( x = c(1, NA, 2), y = c(1,2,3))
filter(NA_df, is.na(x) | x>= 1)
filter(NA_df, x>= 1)
# Load the datasets we will be using for this exercise
# (this dataset is native to R).
install.packages("babynames")
library(babynames)
library(babynames)
data(babynames)
force(babynames)
#----------------------------------------------+
#### Question 1 ####
# Filter all names from 2015.
filter_baebies = filter(babynames, year ==2015)
filter_baebies
#----------------------------------------------+
#### Question 2 ####
# Filter all female names that are from 2015.
filter_baebies_f = filter(babynames, year ==2015, sex == "F")
filter_baebies_f
#----------------------------------------------+
#### Question 3 ####
# Filter all names that are below 1000 counts and that are between 1947-1975 inclusive.
head(babynames)
#----------------------------------------------+
#### Question 3 ####
# Filter all names that are below 1000 counts and that are between 1947-1975 inclusive.
filter_baebies_1947 = filter(babynames, year>=1947 & year <= 1975 , n < 1000)
filter_baebies_1947
tail(filter_baebies_1947)
head(filter_baebies_1947)
#----------------------------------------------+
#### Question 4 ####
# Filter all names that are either female or above 1000 counts, all from 1975.
filter_baebies_F1000 = filter(babynames, year == 1975, n > 1000 | sex == "F")
head(filter_baebies_F1000)
tail(filter_baebies_F1000)
#----------------------------------------------+
#### Question 5 ####
# Filter all names that are either female names born before 1952 or males born after 1985.
filter_baebies_F1952_M1985 = filter(babynames, year > 1975 & sex == "M", year < 1952 & sex == "F")
head(filter_baebies_F1952_M1985)
tail(filter_baebies_F1952_M1985)
#----------------------------------------------+
#### Question 5 ####
# Filter all names that are either female names born before 1952 or males born after 1985.
filter_baebies_F1952_M1985 = filter(babynames, year > 1975 & sex == "M" | year < 1952 & sex == "F")
head(filter_baebies_F1952_M1985)
tail(filter_baebies_F1952_M1985)
filter(babynames, year == 1991, name =="james")
filter(babynames, year == 1991, name =="James")
max(filter(babynames, name =="James"))
filter(babynames, name =="James")
view(filter(babynames, name =="James"))
