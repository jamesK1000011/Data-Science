class(matric_r)
class(matri\x_r)
class(matrix_r)
dim(matrix_c)
# How many rows and columns are there in `matrix_c` and `matrix_r`?
matrix_c
dim(matrix_c)
matrix_r
dim(matrix_r)
attributes(matrix_c)
var4 = c("learning", "R", "studio", "is", "so", "much", "fun")
#rows
colnames(matrix_c) = c("var1", "var2", "var3")
matrix_c
# Return the value in `matrix_c` that is in the 2nd column and 5th row.
matrix_c[2,5]
# Return the value in `matrix_c` that is in the 2nd column and 5th row.
matrix_c[5,2]
matrix_c
list()
list(1,"list", 2)
list(one=1,two="list",three= 2)
list2 = list(1,2,3)
names(list2) = c("one", "two", "three")
attribute(list2)
attributes(list2)
str(list2)
list2 = list(1,"two",3)
str(list2)
?str
list2[[1]]
list2[1]
list2$two
data.frame(1:5,6:10)
data.frame(1:5,6:10, 11:15)
df =data.frame(1:5,6:10, 11:15)
colnames(df) = c("1","2","3")
df
matrix(1:5, 6:10, 11:15)
matrix(1:5)
df2 = as.data.frame(matrix(1:5))
df2
df3 + as.data.frame(df)
df3 = as.data.frame(df)
df3
attributes(df3)
df3$2
df3[,"1"]
df3$Col4 ="4"
df3
df3$Col4 =""
df3
df3$4 =""
df3$"4" =""
df3
str(df3)
df3$Col4 = NULL
df3
is.null(df3$4)
is.null(df3$"4")
is.null(df3$"3")
# Create a numeric vector named `numvec` that contains the values 2.3, 4, 5.63, and 4.623.
# Return the values of `numvec`.
numvec = c(2.3, 4, 5.63, 4.623)
numvec
# Convert the vector `numvec` to a vector of integers named `intvec`.
# Then, confirm if the vector contains integers or not.
# The answer should be either TRUE or FALSE.
intvec = as.integer(numvec)
intvec
is.integer(intvec)
intvec = append(intvec,c(7,14,8), after = 4)
length(intvec)
intvec
# Add the value 3 to all values in `intvec`.
intvec + 3
# Create another vector named `seqvec` that starts at 2, ends at 14, and the numbers increase by 2.
# What is the length of `seqvec`?
seqvec = c(2:14)
seqvec = seq(2, 14, 2)
length(seqvec)
# Assign the result of subtracting `intvec` from `seqvec` to the vector `resvec`.
# Without looking at the `resvec`, what should be the 3rd value in `resvec`?
resvec = seqvec - intvec
# What is the product of resvec?
# What is the minimum value in resvec?
# What is the mean of resvec?
prod(resvec)
min(resvec)
mean(resvec)
matrix_c = cbind(intvec, seqvec, resvec)
matrix_r = rbind(intvec, seqvec, resvec)
class(matrix_c)
class(matrix_r)
# How many rows and columns are there in `matrix_c` and `matrix_r`?
matrix_c
dim(matrix_c)
matrix_r
dim(matrix_r)
attributes(matrix_c)
#column
colnames(matrix_c) = c("var1", "var2", "var3")
matrix_c
# Return the value in `matrix_c` that is in the 2nd column and 5th row.
matrix_c[5,2]
matrix_c
# Convert `matrix_c` to a dataframe and name the new dataframe `matrix_df`.
# When you create the dataframe, assign the row names numbers 15:21.
# Confirm the work by checking the attributes of `matrix_df.
matrix_df = as.data.frame(matrix_c)
matrix_df
rownames(matrix_df) = c(15:21)
attributes(matrix_df)
# Use the three different ways to access the third column of `matrix_df`.
# Then, use the two different ways to access the fourth row.
matrix_df$var3
matrix_df[,3]
matrix_df[,3]
matrix_df[,"var3"]
var4 = c("learning", "R", "studio", "is", "so", "much", "fun")
# Add var4 as a column to `matrix_df` using `cbind` function.
# Confirm your work using attributes.
matrix_df$var4
matrix_df
matrix_df = cbind(var4)
matrix_df
# Convert `matrix_c` to a dataframe and name the new dataframe `matrix_df`.
# When you create the dataframe, assign the row names numbers 15:21.
# Confirm the work by checking the attributes of `matrix_df.
matrix_df = as.data.frame(matrix_c)
rownames(matrix_df) = c(15:21)
attributes(matrix_df)
# Use the three different ways to access the third column of `matrix_df`.
# Then, use the two different ways to access the fourth row.
matrix_df$var3
matrix_df[,3]
matrix_df[,"var3"]
var4 = c("learning", "R", "studio", "is", "so", "much", "fun")
matrix_df = cbind(matrix_df,var4)
matrix_df
attributes(matrix_df)
# Add var5 as a column to `matrix_df`, using the `$` operator, and set it equal to "constant".
# Again, confirm your work with attributes.
matrix_df$var5 = "constant"
attributes(matrix_df)
# Use `data.frame` to create a new dataframe named `new_df`, from scratch,
# using the vectors `numvec`, `intvec`, `seqvec,` `var4`, and `var5`.
# Set the row names to be a sequence from 23 to 26 within the `data.frame` command.
# You will get an error.
# Why can R not join those vectors into a dataframe?
new_df = data.frame(numvec, intvec, seqvec, var4, var5)
# Use `data.frame` to create a new dataframe named `new_df`, from scratch,
# using the vectors `numvec`, `intvec`, `seqvec,` `var4`, and `var5`.
# Set the row names to be a sequence from 23 to 26 within the `data.frame` command.
# You will get an error.
# Why can R not join those vectors into a dataframe?
new_df = data.frame(numvec, intvec, seqvec, var4, var5 = "constant")
# Use length to find the vectors that are longer than 4 entries.
# Adjust the code you just wrote to use only the first four rows of the vectors that are too long.
# Remove the 'var5 =' and write only "constant".
# Check the attributes, structure, and dimensions of `new_df` to confirm your work.
length(4)
# Use length to find the vectors that are longer than 4 entries.
# Adjust the code you just wrote to use only the first four rows of the vectors that are too long.
# Remove the 'var5 =' and write only "constant".
# Check the attributes, structure, and dimensions of `new_df` to confirm your work.
length(numvec)
length(intvec)
class(data.frame(length(4>)))
class(data.frame(length(4)))
length(seqvec)
length(var4)
length(var5)
# Use length to find the vectors that are longer than 4 entries.
# Adjust the code you just wrote to use only the first four rows of the vectors that are too long.
# Remove the 'var5 =' and write only "constant".
# Check the attributes, structure, and dimensions of `new_df` to confirm your work.
var5 = "contant"
length(var5)
# Use length to find the vectors that are longer than 4 entries.
# Adjust the code you just wrote to use only the first four rows of the vectors that are too long.
# Remove the 'var5 =' and write only "constant".
# Check the attributes, structure, and dimensions of `new_df` to confirm your work.
var5 = var4
length(var5)
length(4) <- (var5)
length(4) <- var5
date_vec = c("March 3, 2010", "April 4, 2011", "June 22, 2012", "September 14, 2012")
date_vec= as.Date(date_vec, format = "%d-%b-%y")
date_vec
?as.date
?as.Date
date_vec= as.Date(date_vec, %d-%b-%y)
date_vec= as.Date(date_vec, "%d-%b-%y")
date_vec
date_vec = c("March 3, 2010", "April 4, 2011", "June 22, 2012", "September 14, 2012")
date_vec= as.Date(date_vec, "%d-%b-%y")
date_vec
date_vec = c("March 3, 2010", "April 4, 2011", "June 22, 2012", "September 14, 2012")
date_vec = as.Date(date_vec, "%d-%b-%y")
date_vec = c("March 3, 2010", "April 4, 2011", "June 22, 2012", "September 14, 2012")
date_vec = c("3-Mar-10", "4-Apr-11", "22-Jun-12", "14-Sep-12")
new_df = data.frame(numvec, intvec[1:4])
new_df = data.frame(numvec, intvec[1:4], seqvec[1:4], var4[1:4], var5[1:4] = "constant")
new_df = data.frame(numvec, intvec[1:4], seqvec[1:4], var4[1:4], var5[1:4] "constant")
new_df = data.frame(numvec, intvec[1:4], seqvec[1:4], var4[1:4], var5[1:4])
new_df
new_df = (new_df$Col6 = date_vec)
new_df
new_df = data.frame(numvec, intvec[1:4], seqvec[1:4], var4[1:4], var5[1:4])
new_df
new_df = (new_df$Col6 = as.Date(date_vec)
new_df
new_df
new_df = (new_df$Col6 = as.Date(date_vec)
new_df
date_vec
as.Date(date_vec, "%d-%b-%y")
as.Date(date_vec, "%d-%b-%y")
as.Date(date_vec, "%d %b-%y")
as.Date(date_vec, "%d %b %y")
as.Date(date_vec, "%d-%b-%y")
new_df = (new_df$Col6 = as.Date(date_vec, "%d-%b-%y")
new_df
new_df = (new_df$Col6 = date_vec
new_df
new_df$Col6 = date_vec
new_df
2
new_df$Col7 = c("lets", NA, "try", "this")
is.null(new_df$Col7)
is.na(new_df$Col7)
new_df$Col7 = NULL
new_df
?colnames
colnames(new_df) <- c("Col1", "Col2", "Col3", "Col4", "Col5")
new_df
colnames(new_df) <- c("Col1", "Col2", "Col3", "Col4", "Col5", "Col5")
colnames(new_df) <- c("Col1", "Col2", "Col3", "Col4", "Col5", "Col6")
new_df
plot(cars)
# Below is a the code I ran for Exercise 3 to create several variables
var_1 = (100+65)
var_2 = (3*(1/2))
var_3 = var_1 / var_2
var_4 = 110
temp_var = 10^3
temp_var = temp_var/10
Temp_Var = 5^(-3)
Agent007 = "Bond, James"
logvar = FALSE
typeof(logvar)
new_char2 = is.character(logical)
new_char2 = as.character(logvar)
class(new_char2)
test = 234.3
class(test)
typeof(test)
test2 = as.integer(test)
numvec = c(2.3, 4, 5.63, 4.623)
numvec
intvec = as.integer(numvec)
intvec
is.integer(intvec)
length(intvec)
intvec = append(intvec,c(7,14,8), after = 4)
length(intvec)
intvec
intvec + 3
seqvec = c(2:14)
seqvec = seq(2, 14, 2)
length(seqvec)
resvec = seqvec - intvec
#mybraincantcomprehendthatmuchattention
prod(resvec)
min(resvec)
mean(resvec)
matrix_c = cbind(intvec, seqvec, resvec)
matrix_r = rbind(intvec, seqvec, resvec)
class(matrix_c)
class(matrix_r)
matrix_c
dim(matrix_c)
matrix_r
dim(matrix_r)
attributes(matrix_c)
#column
colnames(matrix_c) = c("var1", "var2", "var3")
matrix_c
matrix_c[5,2]
matrix_c
matrix_df = as.data.frame(matrix_c)
matrix_df
rownames(matrix_df) = c(15:21)
attributes(matrix_df)
matrix_df$var3
matrix_df[,3]
matrix_df[,"var3"]
var4 = c("learning", "R", "studio", "is", "so", "much", "fun")
matrix_df$var4
matrix_df = cbind(matrix_df,var4)
matrix_df
attributes(matrix_df)
matrix_df$var5 = "constant"
attributes(matrix_df)
#Below is a piece of code that will not run to vectors length mismatch
#new_df = data.frame(numvec, intvec, seqvec, var4, var5 = "constant", row.names = 23:26)
var5 = var4
length(numvec)
length(intvec)
length(seqvec)
length(var4)
length(var5)
new_df = data.frame(numvec, intvec[1:4], seqvec[1:4], var4[1:4], var5[1:4])
new_df
date_vec = c("3-Mar-10", "4-Apr-11", "22-Jun-12", "14-Sep-12")
as.Date(date_vec, "%d-%b-%y")
new_df$Col6 = date_vec
new_df
new_df$Col7 = c("lets", NA, "try", "this")
# Row 2 of Col7 will return True for is.na
is.na(new_df$Col7)
new_df$Col7
new_df$Col7 = NULL
new_df
colnames(new_df) <- c("Col1", "Col2", "Col3", "Col4", "Col5", "Col6")
new_df
?colnames
matrix_df = as.data.frame(matrix_c)
matrix_df
rownames(matrix_df) = c(15:21)
attributes(matrix_df)
matrix_df$var3
matrix_df[,3]
matrix_df[,"var3"]
var4 = c("learning", "R", "studio", "is", "so", "much", "fun")
matrix_df$var4
matrix_df = cbind(matrix_df,var4)
matrix_df
attributes(matrix_df)
matrix_df$var5 = "constant"
attributes(matrix_df)
#Below is a piece of code that will not run to vectors length mismatch
#new_df = data.frame(numvec, intvec, seqvec, var4, var5 = "constant", row.names = 23:26)
var5 = var4
length(numvec)
length(intvec)
length(seqvec)
length(var4)
length(var5)
new_df = data.frame(numvec, intvec[1:4], seqvec[1:4], var4[1:4], var5[1:4])
new_df
date_vec = c("3-Mar-10", "4-Apr-11", "22-Jun-12", "14-Sep-12")
as.Date(date_vec, "%d-%b-%y")
new_df$Col6 = date_vec
new_df
new_df$Col7 = c("lets", NA, "try", "this")
# Row 2 of Col7 will return True for is.na
is.na(new_df$Col7)
new_df$Col7
new_df$Col7 = NULL
new_df
colnames(new_df) <- c("Col1", "Col2", "Col3", "Col4", "Col5", "Col6")
new_df
?colnames
var_1 = (100+65)
var_2 = (3*(1/2))
var_3 = var_1 / var_2
var_4 = 110
temp_var = 10^3
temp_var = temp_var/10
Temp_Var = 5^(-3)
Agent007 = "Bond, James"
logvar = FALSE
typeof(logvar)
new_char2 = is.character(logical)
new_char2 = as.character(logvar)
class(new_char2)
test = 234.3
class(test)
typeof(test)
test2 = as.integer(test)
numvec = c(2.3, 4, 5.63, 4.623)
numvec
intvec = as.integer(numvec)
intvec
is.integer(intvec)
length(intvec)
intvec = append(intvec,c(7,14,8), after = 4)
length(intvec)
intvec
intvec + 3
seqvec = c(2:14)
seqvec = seq(2, 14, 2)
length(seqvec)
resvec = seqvec - intvec
#mybraincantcomprehendthatmuchattention
prod(resvec)
min(resvec)
mean(resvec)
matrix_c = cbind(intvec, seqvec, resvec)
matrix_r = rbind(intvec, seqvec, resvec)
class(matrix_c)
class(matrix_r)
matrix_c
dim(matrix_c)
matrix_r
dim(matrix_r)
attributes(matrix_c)
#column
colnames(matrix_c) = c("var1", "var2", "var3")
matrix_c
matrix_c[5,2]
matrix_c
matrix_df = as.data.frame(matrix_c)
matrix_df
rownames(matrix_df) = c(15:21)
attributes(matrix_df)
matrix_df$var3
matrix_df[,3]
matrix_df[,"var3"]
var4 = c("learning", "R", "studio", "is", "so", "much", "fun")
matrix_df$var4
matrix_df = cbind(matrix_df,var4)
matrix_df
attributes(matrix_df)
matrix_df$var5 = "constant"
attributes(matrix_df)
#Below is a piece of code that will not run to vectors length mismatch
#new_df = data.frame(numvec, intvec, seqvec, var4, var5 = "constant", row.names = 23:26)
var5 = var4
length(numvec)
length(intvec)
length(seqvec)
length(var4)
length(var5)
new_df = data.frame(numvec, intvec[1:4], seqvec[1:4], var4[1:4], var5[1:4])
new_df
date_vec = c("3-Mar-10", "4-Apr-11", "22-Jun-12", "14-Sep-12")
as.Date(date_vec, "%d-%b-%y")
new_df$Col6 = date_vec
new_df
new_df$Col7 = c("lets", NA, "try", "this")
# Row 2 of Col7 will return True for is.na
is.na(new_df$Col7)
new_df$Col7
new_df$Col7 = NULL
new_df
colnames(new_df) <- c("Col1", "Col2", "Col3", "Col4", "Col5", "Col6")
new_df
?colnames
setwd("~/Desktop/af-werx")
setwd("~/Desktop/af-werx")
setwd("~/Desktop/af-werx")
main_dir = "~/Desktop/af-werx"
data_dir = paste0(main_dir, "/data")
data_dir
plot_dir = paste0(main_dir, "/plots")
plot_dir
setwd(data_dir)
getwd()
temp_heart_rate = read.csv("temp_heart_rate", header = T, stringsAsFactors = F)
temp_heart_rate = read.csv("temp_heart_rate.csv", header = T, stringsAsFactors = F)
temp_heart_rate = read.csv("temp_heart_rate.csv", header = T, stringsAsFactors = F)
getwd()
setwd("~/Desktop/af-werx")
main_dir = "~/Desktop/af-werx"
data_dir = paste0(main_dir, "/data")
data_dir
plot_dir = paste0(main_dir, "/plots")
plot_dir
setwd(data_dir)
getwd()
main_dir = "~/Desktop/af-werx"
data_dir = paste0(main_dir, "/data")
data_dir
plot_dir = paste0(main_dir, "/plots")
plot_dir
setwd(data_dir)
getwd()
setwd("~/Desktop/af-werx")
temp_heart_rate = read.csv("temp_heart_rate.csv", header = T, stringsAsFactors = F)
setwd("~/Desktop/af-werx")
getwd()
setwd("~/Desktop/af-werx")
getwd()
getwd()
temp_heart_rate = read.csv("temp_heart_rate.csv", header = T, stringsAsFactors = F)
temp_heart_rate = read.csv("temp_heart_rate.csv", header = T, stringsAsFactors = F)
setwd("~/Desktop/af-werx")
main_dir = "~/Desktop/af-werx"
data_dir = paste0(main_dir, "/data")
data_dir
plot_dir = paste0(main_dir, "/plots")
plot_dir
setwd(data_dir)
getwd()
temp_heart_rate = read.csv("temp_heart_rate.csv", header = T, stringsAsFactors = F)
str(temp_heart_rate)
head(temp_heart_rate)
tail(temp_heart_rate)
head(temp_heart_rate)
View(temp_heart_rate)
temp_heart_subset = temp_heart_rate[1:10,]
write.csv(temp_heart_subset, "temp_heart_subset.csv", row.names = F)
ls()
write.csv(temp_heart_subset, "temp_heart_subset.csv", row.names = F)
temp_heart_subset = temp_heart_rate[1:10,]
write.csv(temp_heart_subset, "temp_heart_subset.csv", row.names = F)
getwd()
getwd()
getwd()
