fast_food_sub_na
# the fast_food dataframe. Omit all rows containing NA values.
# HINT: na.omit() may be a useful function.
fast_food_sub = fast_food_sub %>% na.omit()
fast_food_sub
# Then, create a correlation matrix with 'fast_food_sub' named 'cor_matrix'.
cor_matrix = cor(fast_food_sub)
# Use hchart to create an interactive correlation plot, named 'corr_interactive'.
corr_interactive = hchart(cor_matrix) %>%
hc_title(text = "Fast Food Data Correlation")
# Add a title "Fast Food Data Correlation" and view the plot.
corr_interactive
# Create data summary.
CMP_summary = summary(CMP_subset)
# Save it as a dataframe.
CMP_summary = as.data.frame(CMP_summary)
# Inspect the data.
head(CMP_summary)
# Remove an empty variable.
CMP_summary$Var1 = NULL
# Rename remaining columns.
colnames(CMP_summary) = c("Variable",
"Summary")
# Inspect updated data.
head(CMP_summary)
# Separate `Summary` column into 2 columns.
CMP_summary = CMP_summary %>%              #<- set original data
separate(Summary,                        #<- separate `Summary` variable
into = c("Statistic", "Value"), #<- into 2 columns: `Statistic`, `Value`
sep = ":",                      #<- set separating character
convert = TRUE)                 #<- where applicable convert data (to numeric)
# Inspect the first few entries in the data.
head(CMP_summary)
# Inspect total number of rows in data including NAs.
nrow(CMP_summary)
# Inspect `Value` column for `NAs`.
which(is.na(CMP_summary$Value) == TRUE)
# Subset only rows where `Value` is not NAs.
CMP_summary = subset(CMP_summary, !is.na(Value))
# Now the number of rows should be 4 less.
nrow(CMP_summary)
# Construct the summary chart.
CMP_summary_interactive =
hchart(CMP_summary,             #<- set data
"column",                #<- set type (`column` in highcharts)
hcaes(x = Statistic,     #<- arrange `Statistics` across x-axis
y = Value,         #<- map `Value` of each `Statistic` to y-axis
group = Variable)) #<- group columns by `Variable`
CMP_summary_interactive
# Adjust tooltip options by piping `hc_tooltip` to base plot.
CMP_summary_interactive = CMP_summary_interactive %>%
hc_tooltip(shared = TRUE)  %>%               #<- `shared` needs to be set to `TRUE`
hc_title(text = "CMP data variable summary") #<- add title to your plot
CMP_summary_interactive
# Construct an interactive boxplot.
boxplot_interactive =
hcboxplot(x = CMP_subset_long$norm_value,
var = CMP_subset_long$variable,
name = "Normalized value") %>%
hc_title(text = "CMP data variables")
boxplot_interactive
# Enhance original boxplot with some options.
boxplot_interactive = boxplot_interactive %>%
hc_plotOptions(       #<- plot options
boxplot = list(     #<- for boxplot
colorByPoint = TRUE)) #<- color each box
boxplot_interactive
layered_density_interactive = highchart() %>% #main chart
hc_chart(type = "area") %>% #global chart option for to apply for all layers
hc_add_series(data = density(CMP_subset$Yield),
name = "Yield") %>%
hc_add_series(data = density(CMP_subset$BiologicalMaterial01),
name = "Bio Material 1") %>%
hc_add_series(data = density(CMP_subset$ManufacturingProcess01, na.rm = TRUE),
name = "Man. Process 1") %>%
hc_xAxis(plotLines = list(
list(label = list(text = "Yield avg."),
width = 2,
color = "red",
value = mean(CMP_subset$Yield)),
list(label = list(text = "Bio Material 1 avg."),
width = 2,
color = "red",
value = mean(CMP_subset$BiologicalMaterial01)),
list(label = list(text = "Man. Process 1 avg."),
width = 2,
color = "red",
value = mean(CMP_subset$ManufacturingProcess01, na.rm = TRUE)))) %>%
hc_tooltip(crosshairs = TRUE) %>%
hc_title(text = "CMP data: density and average of select variables")
layered_density_interactive
# Save the output of `summary(fast_food_sub)` to `ffood_summary` and a dataframe object.
# Then, inspect `ffood_summary`.
# Remove `Var1` from `ffood_summary` and rename the remaining columns to be "Variable" and "Summary".
# Inspect `ffood_summary` after you make those changes.
ffood_summary = summary(fast_food_sub)
ffood_summary = as.data.frame(ffood_summary)
# Then, inspect `ffood_summary`.
head(ffood_summary)
# Remove `Var1` from `ffood_summary` and rename the remaining columns to be "Variable" and "Summary".
ffood_summary$Var1 = NULL
colnames(ffood_summary) = c("Variable", "Summary")
# Inspect `ffood_summary` after you make those changes.
head(ffood_summary)
# You want the statistic and the value to be in different columns
# and convert the applicable data to numeric, rather than character.
# What separator will you use to split the column into two?
ffood_summary = ffood_summary %>% separate(into = c("Statistic", "value"), sep = ":", convert = TRUE)
# You want the statistic and the value to be in different columns
# and convert the applicable data to numeric, rather than character.
# What separator will you use to split the column into two?
ffood_summary = ffood_summary %>% separate(Summary, into = c("Statistic", "value"), sep = ":", convert = TRUE)
head(ffood_summary)
#----------------------------------------------+
#### Question 3 ####
# Setup & connect:
# Construct the summary chart `ffood_summary_interactive` using `hchart`.
nrow(subset(ffood_summary, !is.na(Value)))
#----------------------------------------------+
#### Question 3 ####
# Setup & connect:
# Construct the summary chart `ffood_summary_interactive` using `hchart`.
nrow(subset(ffood_summary, !is.na(value)))
#----------------------------------------------+
#### Question 3 ####
# Setup & connect:
# Construct the summary chart `ffood_summary_interactive` using `hchart`.
nrow(subset(ffood_summary, is.na(value)))
#----------------------------------------------+
#### Question 3 ####
# Setup & connect:
# Construct the summary chart `ffood_summary_interactive` using `hchart`.
ffood_summary_interactive = hchart(ffood_summary, "column", hcaes(x = Statistic, y = value, group = Variable))
# Add the setting that the tool tip is shared to `ffood_summary_interactive`.
ffood_summary_interactive = ffood_summary_interactive %>%
hc_tooltip(shared = TRUE)
# View `ffood_summary_interactive`.
ffood_summary_interactive
# What's off about this chart?
print("the sodium is to damn high!")
fast_food_sub$sodium = fast_food_sub$sodium/1000
head(fast_food_sub)
ffood_summary = summary(fast_food_sub)
ffood_summary = as.data.frame(ffood_summary)
ffood_summary$Var1 = NULL
colnames(ffood_summary) = c("Variable", "Summary")
head(ffood_summary)
ffood_summary = ffood_summary %>% separate(Summary, into = c("Statistic", "value"), sep = ":", convert = TRUE)
head(ffood_summary)
nrow(subset(ffood_summary, is.na(value)))
ffood_summary_interactive = hchart(ffood_summary, "column", hcaes(x = Statistic, y = value, group = Variable))
ffood_summary_interactive = ffood_summary_interactive %>%
hc_tooltip(shared = TRUE)
ffood_summary_interactive
# Create an interactive boxplot called `ff_bp_interactive`.
head(fast_food_long)
ff_bp_interactive = hcboxplot(x = fast_food_long$variable,
var = fast_food_long$grams,
name="Normalized value") %>%
hc_title(text = "Fast Food Interactive BP")
# Construct an interactive boxplot.
CMP_subset_long
ff_bp_interactive = hcboxplot(x = fast_food_long$grams,
var = fast_food_long$variable,
name="Normalized value") %>%
hc_title(text = "Fast Food Interactive BP")
ff_bp_interactive
ff_bp_interactive = hcboxplot(x = fast_food_long$grams,
var = fast_food_long$variable,
name="Normalized value")
ff_bp_interactive
#----------------------------------------------+
#### Question 5 ####
# Enhance the boxplot options using `hc_plotOptions`, to color each boxplot.
# Add a title to the plot "Fast Food Data Boxplot".
ff_bp_interactive = ff_bp_interactive %>%
hc_plotOptions(boxplot = list(colorByPoint = TRUE)) %>%
hc_title(text = "Fast Food Data Boxplot")
# View the plot.
ff_bp_interactive
require("knitr")
opts_knit$set(root.dir = "~/Desktop/af-werx/data")
setwd("~/Desktop/af-werx")
getwd()
main_dir = "~/Desktop/af-werx"
data_dir = paste0(main_dir, "/data")
data_dir
plot_dir = paste0(main_dir, "/plots")
plot_dir
setwd(data_dir)
getwd()
setwd("~/Desktop/af-werx/data")
library(shiny)
runApp('~/Desktop/af-werx/shiny/day-1/1-example')
runApp('~/Desktop/af-werx/shiny/day-1/2-base app')
#### Question 1 ####
# Navigate to the 'shiny' folder and the subfolder called 'day-1-exercises'.
# Inside the folder 'day-1-exercises', create a folder called 'exercise-1'.
Printd("G2G")
#### Question 1 ####
# Navigate to the 'shiny' folder and the subfolder called 'day-1-exercises'.
# Inside the folder 'day-1-exercises', create a folder called 'exercise-1'.
Printd("G2G")
#### Question 1 ####
# Navigate to the 'shiny' folder and the subfolder called 'day-1-exercises'.
# Inside the folder 'day-1-exercises', create a folder called 'exercise-1'.
Print("G2G")
#### Question 1 ####
# Navigate to the 'shiny' folder and the subfolder called 'day-1-exercises'.
# Inside the folder 'day-1-exercises', create a folder called 'exercise-1'.
Print("G2G")
#### Question 1 ####
# Navigate to the 'shiny' folder and the subfolder called 'day-1-exercises'.
# Inside the folder 'day-1-exercises', create a folder called 'exercise-1'.
print("G2G")
#### Question 2 ####
# Inside the folder 'exercise-1', create a new R file called 'ui.R'.
print("G2G")
# Set working directory
session_info = sessionInfo()
platform = session_info$platform # capture info on OS being used
directory = "af-werx" # set directory variable to 'af-werx'
# In the ui.R file, set the directory to the 'af-werx' folder, using code that can
# automatically detect if a user is using a Linux-based system (Apple or Linux) or a Windows-based system.
print("G2G")
# In the ui.R file, create data-dir and set working directory to data directory.
print("G2G")
# In the ui.R file, load the Shiny package.
print("G2G")
# Set working directory
session_info = sessionInfo()
platform = session_info$platform # capture info on OS being used
directory = "af-werx" # set directory variable to 'af-werx'
if(length(grep("linux|apple", platform)) > 0 ) { # determine if using linux-based sysem
Sys.getenv("USER")
dir = paste0("`/Desktop/", directory) # if Linux, create dir variable here
print("Apple sucks! switch to Windows or Linux")
}else{
username = Sys.getenv("USERNAME")
dir=paste0("C:/Users/", username, "/Desktop/", directory) # if Windows, create dir variable here
}
# Create data-dir and set working directory to data directory
data_dir = paste0(dir, "/data")
setwd(data_dir)
#load "oooh, Shiny" library
library(shiny)
setwd("~/Desktop/af-werx/data")
# In the ui.R file, add the code to load the 'fast_food_data.csv' dataset as 'fast_food_data'.
# In the ui.R file, add the code to load the 'fast_food_data.csv' dataset as 'fast_food_data'.
print("G2G")
# Please comment each line of code with a brief description.
print("G2G")
### Question 3 ####
# In the ui.R file, add the code to create the actual UI.
print("G2G")
### Question 4 ####
# Inside the folder 'exercise-1', create a new R file called 'server.R'.
print("G2G")
# In the 'server.R' file, set the directory to the 'af-werx' folder, using code that can automatically detect if a user is using a Linux-based system (Apple or Linux) or a Windows-based system.
print("G2G")
# In the 'server.R' file, add the code to load the 'shiny' package.
print("G2G")
# In the 'server.R file, add the code to load the 'fast_food_data.csv' dataset as `fast_food_data`.
print("G2G")
# Please comment each line of code with a brief description.
# Please comment each line of code with a brief description.
print("G2G")
### Question 5 ####
# In the 'server.R' file, add the code to create the actual Server.
print("G2G")
runApp('~/Desktop/af-werx/shiny/day-1-exercises/exercise-1')
setwd("~/Desktop")
runApp('af-werx/shiny/day-1-exercises/exercise-1')
runApp('af-werx/shiny/day-1-exercises/exercise-1')
setwd("~/Desktop/af-werx/data")
getwd()
runApp('~/Desktop/af-werx/shiny/day-1-exercises/exercise-1')
runApp('~/Desktop/af-werx/shiny/day-1-exercises/exercise-1')
shiny::runApp('shiny/day-1-exercises/exercise-1')
setwd("~/Desktop/af-werx/data")
runApp('~/Desktop/af-werx/shiny/day-1-exercises/exercise-1')
runApp('~/Desktop/af-werx/shiny/day-1-exercises/exercise-1')
runApp('~/Desktop/af-werx/shiny/day-1-exercises/exercise-1')
setwd("~/Desktop/af-werx/data")
runApp('~/Desktop/af-werx/shiny/day-1-exercises/exercise-1')
runApp()
runApp()
setwd("/Users/datasociety/Desktop/af-werx/data")
getwd()
setwd("/Users/datasociety/Desktop/af-werx/data")
runApp('~/Desktop/af-werx/shiny/day-1-exercises/exercise-1')
runApp('~/Desktop/af-werx/shiny/day-1-exercises/exercise-1')
#### Question 6 ####
# Run your application.
# What do you see?
Print("lost of errors apple doesn not like R")
#### Question 6 ####
# Run your application.
# What do you see?
print("lost of errors apple doesn not like R")
runApp('~/Desktop/af-werx/shiny/day-1-exercises/exercise-1')
#### Question 1 ####
# Navigate to the 'shiny' folder and the subfolder called 'day-1-exercises'.
# Inside the folder 'day-1-exercises', create a folder called 'exercise-2'.
# Inside 'exercise-2' create three folder, called 'question-3', 'question-4', and 'question-5'.
print("done")
#### Question 2 ####
# In each of the folders called 'question-3', 'question-4', and 'question-5', create a file 'ui.R' that contains the base structure and a file 'server.R' that contains the base structure.
print("done")
runApp('~/Desktop/af-werx/shiny/exercise-2/question-3')
#### Question 3 ####
# In folder 'question-3', manipulate 'ui.R' to create a slider range according to the following instructions:
# - Name of the element: 'exerciseSliderRange'
# - Header to be displayed: 'Select your range'
# - Minimum value that can be selected: -100
# - Maximum value that can be selected: 100
# - Range selected by default: -10 to 10
print("done")
runApp('~/Desktop/af-werx/shiny/exercise-2/question-4')
runApp('~/Desktop/af-werx/shiny/exercise-2/question-4')
runApp('~/Desktop/af-werx/shiny/exercise-2/question-4')
runApp('~/Desktop/af-werx/shiny/exercise-2/question-4')
runApp('~/Desktop/af-werx/shiny/exercise-2/question-4')
runApp('~/Desktop/af-werx/shiny/exercise-2/question-3')
runApp('~/Desktop/af-werx/shiny/exercise-2/question-4')
runApp('~/Desktop/af-werx/shiny/exercise-2/question-4')
setwd("~/Desktop/af-werx/data")
runApp('~/Desktop/af-werx/shiny/exercise-2/question-4')
shiny::runApp('shiny/exercise-2/question-4')
#load "oooh, Shiny" library
library(shiny)
runApp('shiny/exercise-2/question-4')
setwd("~/Desktop/af-werx/data")
runApp('~/Desktop/af-werx/shiny/exercise-2/question-4')
runApp('~/Desktop/af-werx/shiny/exercise-2/question-4')
runApp('~/Desktop/af-werx/shiny/exercise-2/question-4')
runApp('~/Desktop/af-werx/shiny/exercise-2/question-4')
runApp('~/Desktop/af-werx/shiny/exercise-2/question-4')
runApp('~/Desktop/af-werx/shiny/exercise-2/question-5')
runApp('~/Desktop/af-werx/shiny/exercise-2/question-5')
runApp('~/Desktop/af-werx/shiny/exercise-2/question-5')
runApp('~/Desktop/af-werx/shiny/exercise-2/question-4')
runApp('~/Desktop/af-werx/shiny/exercise-2/question-3')
runApp('~/Desktop/af-werx/shiny/exercise-2/question-4')
runApp('~/Desktop/af-werx/shiny/exercise-2/question-5')
# Navigate to the 'shiny' folder and the subfolder called 'day-1-exercises'.
# Inside the folder 'day-1-exercises', create a folder called 'exercise-3'.
# Inside 'exercise-3' create four folders, called 'question-3', 'question-4', 'question-5' and 'question-6'.
print("g2g")
#### Question 2 ####
# In each of the folders called 'question-3', 'question-4', 'question-5' and 'question-6', create a file 'ui.R' that contains the base structure and a file 'server.R' that contains the base structure.
print("g2g")
runApp('~/Desktop/af-werx/shiny/exercise-3/question-3')
runApp('~/Desktop/af-werx/shiny/exercise-3/question-3')
runApp('~/Desktop/af-werx/shiny/exercise-3/question-3')
runApp('~/Desktop/af-werx/shiny/exercise-3/question-3')
runApp('~/Desktop/af-werx/shiny/exercise-3/question-3')
runApp('~/Desktop/af-werx/shiny/exercise-3/question-3')
runApp('~/Desktop/af-werx/shiny/exercise-3/question-4')
# load the Fast and furious food data
fast_food_data = read.csv("fast_food_data.csv", header = TRUE, stringsAsFactors = FALSE)
fast_food_data
runApp('~/Desktop/af-werx/shiny/exercise-3/question-5')
runApp('~/Desktop/af-werx/shiny/exercise-3/question-6')
runApp('~/Desktop/af-werx/shiny/exercise-3/question-6')
runApp('~/Desktop/af-werx/shiny/exercise-4/question-3')
runApp('~/Desktop/af-werx/shiny/exercise-4/question-4')
runApp('~/Desktop/af-werx/shiny/exercise-4/question-4')
setwd("~/Desktop/af-werx/data")
setwd("~/Desktop/af-werx/data")
CMP = read.csv("ChemicalManufacturingProcess.csv", header = TRUE, stringsAsFactors = FALSE)
#load "oooh, Shiny" library
library(shiny)
# load the Fast and furious food data
fast_food_data = read.csv("fast_food_data.csv", header = TRUE, stringsAsFactors = FALSE)
setwd("/Users/datasociety/Desktop/af-werx/data")
#load "oooh, Shiny" library
library(shiny)
options(encoding = "UTF-8")
#load "oooh, Shiny" library
library(shiny)
#load "oooh, Shiny" library
library(shiny)
# Creae ui.r
ui <- fluidPage(
# title of the app
TitlePanel("Select your fast_food_data table"),
# radio button to choose the option
radioButtons("option",
"Choose an option",
c("Display all columns", "Only display 'Type' and 'Calories'")),
# output function to display
tableOutput("fast_food_data")
)
# Creae ui.r
ui <- fluidPage(
# title of the app
titlePanel("Select your fast_food_data table"),
# radio button to choose the option
radioButtons("option",
"Choose an option",
c("Display all columns", "Only display 'Type' and 'Calories'")),
# output function to display
tableOutput("fast_food_data")
)
# UI part:
# Create radio buttons to give the option to either `Display all columns` or `Only display 'Type' and 'Calories'`.
# The application should let the user select how many rows to be displayed by using numericInput.
# Also add a title panel to the application that says 'Select your fast_food_data table'.
# Output the fast_food_data table coming from server using tableOutput.
fast_food_data
# UI part:
# Create radio buttons to give the option to either `Display all columns` or `Only display 'Type' and 'Calories'`.
# The application should let the user select how many rows to be displayed by using numericInput.
# Also add a title panel to the application that says 'Select your fast_food_data table'.
# Output the fast_food_data table coming from server using tableOutput.
attributes(fast_food_data)
runApp('~/Desktop/af-werx/shiny/day-2/day-1-exercises/exercise-1')
runApp('~/Desktop/af-werx/shiny/day-2/day-1-exercises/exercise-1')
runApp('~/Desktop/af-werx/shiny/day-2/day-1-exercises/exercise-2')
setwd("~/Desktop/af-werx/data")
runApp('~/Desktop/af-werx/shiny/day-2/day-1-exercises/exercise-2')
runApp('~/Desktop/af-werx/shiny/day-2/day-1-exercises/exercise-2')
runApp('~/Desktop/af-werx/shiny/day-2/day-1-exercises/exercise-2')
runApp('~/Desktop/af-werx/shiny/day-2/day-1-exercises/exercise-2')
runApp('~/Desktop/af-werx/shiny/day-2/day-1-exercises/exercise-2')
#load "oooh, Shiny" library
library(shiny)
#load "oooh, Shiny" library
library(shiny)
options(encoding = "UTF-8")
library(shiny)
#load "oooh, Shiny" library
library(shiny)
library(shiny)
#load "oooh, Shiny" library
library(shiny)
runApp('~/Desktop/af-werx/shiny/day-2/day-1-exercises/exercise-2')
runApp('~/Desktop/af-werx/shiny/day-2/day-1-exercises/exercise-2')
runApp('~/Desktop/af-werx/shiny/day-2/day-1-exercises/exercise-2')
runApp('~/Desktop/af-werx/shiny/day-2/day-1-exercises/exercise-2')
#load "oooh, Shiny" library
library(shiny)
runApp('~/Desktop/af-werx/shiny/day-2/day-1-exercises/exercise-2')
runApp('~/Desktop/af-werx/shiny/day-2/day-1-exercises/exercise-2')
#### Question 3 ####
# Build a reactive Shiny application that displays a scatter of two variables
# in the fast_food_data dataset and also displays the structure (use str() function) of the two variables.
str(fast_food_data)
fast_food_sub = fast_food_data(,4:14)
fast_food_sub = fast_food_data[,4:14]
fast_food_sub = select(fast_food_data[,4:14])
fast_food_sub = fast_food_data[,4:13]
str(fast_food_sub)
runApp('~/Desktop/af-werx/shiny/day-2/day-1-exercises/exercise-2')
library(tidyr)
runApp('~/Desktop/af-werx/shiny/day-2/day-1-exercises/exercise-2')
?radioButtons
runApp('~/Desktop/af-werx/shiny/day-2/day-1-exercises/exercise-2')
runApp('~/Desktop/af-werx/shiny/day-2/day-1-exercises/exercise-2')
runApp('~/Desktop/af-werx/shiny/day-2/day-1-exercises/exercise-2')
runApp('~/Desktop/af-werx/shiny/day-2/day-1-exercises/exercise-2')
runApp('~/Desktop/af-werx/shiny/day-2/day-1-exercises/exercise-2')
runApp('~/Desktop/af-werx/shiny/day-2/day-1-exercises/exercise-2')
runApp('~/Desktop/af-werx/shiny/day-2/day-1-exercises/exercise-2')
runApp('~/Desktop/af-werx/shiny/day-2/day-1-exercises/exercise-2')
runApp('~/Desktop/af-werx/shiny/day-2/day-1-exercises/exercise-2')
setwd("~/Desktop/af-werx/shiny/day-2/day-2-exercises/exercise-4")
fast_food_sub
fast_food_data
str(fast_food_data)
fast_food_sub = fast_food_data[,4:5]
fast_food_sub
runApp()
runApp()
runApp()
setwd("~/Desktop/af-werx/shiny/day-2/day-2-exercises/exercise-4")
runApp()
runApp()
runApp()
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='jameskingafwerx',
token='FD62F57634D3F085918C8F6F89345C54',
secret='6Dko2G2QrO/QGlRSR9vCAxQgA/jsL1SpwuszLH56'
library(rsconnect)
rsconnect::deployApp('~/Desktop/af-werx/shiny/day-2/day-2-exercises/exercise-4')
shiny::runApp()
ls
PTNv2 = read.csv("PTNv2 Maneuver_Grades_data.csv", header = T)
setwd("~/Documents")
PTNv2 = read.csv("PTNv2 Maneuver_Grades_data.csv", header = T)
PTNv2 = read.csv("PTNv2 Maneuver_Grades_data.csv")
view(PTNv2)
View(PTNv2)
library(readr)
dataset <- read_csv(NULL)
View(dataset)
PTNv2 = read.csv("PTNv2 Maneuver_Grades_data.csv", header = T, stringsAsFactors = F)
View(PTNv2)
PTNv2 = read.csv("PTNv2 Maneuver_Grades_data.csv", header = F, stringsAsFactors = F)
setwd("~/Downloads")
Milpds = read.csv('AF_A1_Exord_Data.csv')
head(Milpds)
colnames(Milpds)
summary(Milpds)
attributes(Milpds)
tail(Milpds)
summary(Milpds)
Count(Milpds$GENDER)
count(Milpds$GENDER)
dim(Milpds)
